// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Ticket {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(255)
  description      String   @db.Text
  status           Status   @default(OPEN) // You might use an enum for different statuses (e.g., "Open," "Closed," "In Progress")
  assignedToUser   User?    @relation(fields: [assignedToUserId], references: [id]) // Optional relation to User, indicating who the issue is assigned to
  //createdBy    User     @relation(fields: [createdById], references: [id]) // Required relation to User, indicating who created the issue
  assignedToUserId String?  @db.VarChar(255)
  //createdById  Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  //@@index([createdById], name: "idx_createdById")

  // Foreign key constraints
  @@index([assignedToUserId], name: "idx_assignedToId")
}

enum Status {
  OPEN
  INPROGRESS
  RESOLVED
  CLOSED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  assignedTickets Ticket[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
